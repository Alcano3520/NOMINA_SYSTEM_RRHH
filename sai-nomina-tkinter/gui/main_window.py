"""Ventana principal de la aplicaci√≥n"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import logging

from config import Config
from gui.components.sidebar import Sidebar
from gui.components.header import Header

logger = logging.getLogger(__name__)

class MainApplication:
    def __init__(self, root):
        self.root = root
        self.root.title(Config.APP_NAME)
        self.root.geometry(f"{Config.WINDOW_WIDTH}x{Config.WINDOW_HEIGHT}")
        self.root.state('zoomed') if hasattr(self.root, 'state') else None

        # Configurar el cierre de ventana
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

        # Variables
        self.current_module = None
        self.current_user = "Admin"  # TODO: Implementar login

        # Crear interfaz
        self.setup_ui()

        # Cargar m√≥dulo inicial
        self.load_module("empleados")

    def setup_ui(self):
        """Configurar la interfaz principal"""
        # Contenedor principal con gradiente
        self.main_container = tk.Frame(self.root, bg=Config.COLORS['background'])
        self.main_container.pack(fill="both", expand=True)

        # Header
        self.header = Header(self.main_container, self.current_user)
        self.header.pack(fill="x", padx=0, pady=0)

        # Contenedor para sidebar y contenido
        self.content_container = tk.Frame(self.main_container, bg=Config.COLORS['background'])
        self.content_container.pack(fill="both", expand=True, padx=20, pady=20)

        # Grid para sidebar y √°rea de contenido
        self.content_container.grid_columnconfigure(1, weight=1)
        self.content_container.grid_rowconfigure(0, weight=1)

        # Sidebar
        self.sidebar = Sidebar(self.content_container, self.load_module)
        self.sidebar.grid(row=0, column=0, sticky="ns", padx=(0, 20))

        # √Årea de contenido
        self.content_area = tk.Frame(
            self.content_container,
            bg=Config.COLORS['surface'],
            relief="flat"
        )
        self.content_area.grid(row=0, column=1, sticky="nsew")

        # Aplicar estilo de tarjeta al √°rea de contenido
        self.apply_card_style(self.content_area)

    def apply_card_style(self, widget):
        """Aplicar estilo de tarjeta con sombra"""
        widget.configure(
            highlightbackground=Config.COLORS['card_shadow'],
            highlightcolor=Config.COLORS['card_shadow'],
            highlightthickness=2
        )

    def load_module(self, module_name):
        """Cargar un m√≥dulo espec√≠fico"""
        logger.info(f"Cargando m√≥dulo: {module_name}")

        # Limpiar contenido actual
        for widget in self.content_area.winfo_children():
            widget.destroy()

        # Crear instancia del m√≥dulo
        try:
            if module_name == "empleados":
                from gui.modules.empleados import EmpleadosModule
                self.current_module = EmpleadosModule(self.content_area)
            elif module_name == "nomina":
                from gui.modules.nomina import NominaModule
                self.current_module = NominaModule(self.content_area)
            elif module_name == "decimos":
                from gui.modules.decimos import DecimosModule
                self.current_module = DecimosModule(self.content_area)
            elif module_name == "vacaciones":
                from gui.modules.vacaciones import VacacionesModule
                self.current_module = VacacionesModule(self.content_area)
            elif module_name == "prestamos":
                from gui.modules.prestamos import PrestamosModule
                self.current_module = PrestamosModule(self.content_area)
            elif module_name == "egresos":
                from gui.modules.egresos import EgresosModule
                self.current_module = EgresosModule(self.content_area)
            elif module_name == "dotacion":
                from gui.modules.dotacion import DotacionModule
                self.current_module = DotacionModule(self.content_area)
            elif module_name == "reportes":
                from gui.modules.reportes import ReportesModule
                self.current_module = ReportesModule(self.content_area)
            else:
                self.show_placeholder_module(module_name)
                return

            self.current_module.pack(fill="both", expand=True)

            # Actualizar sidebar
            self.sidebar.set_active(module_name)

        except ImportError as e:
            logger.warning(f"M√≥dulo {module_name} no implementado a√∫n: {e}")
            self.show_placeholder_module(module_name)
        except Exception as e:
            logger.error(f"Error cargando m√≥dulo {module_name}: {e}")
            messagebox.showerror("Error", f"Error cargando m√≥dulo '{module_name}':\n{str(e)}")

    def show_placeholder_module(self, module_name):
        """Mostrar m√≥dulo placeholder"""
        placeholder_frame = tk.Frame(self.content_area, bg=Config.COLORS['surface'])
        placeholder_frame.pack(fill="both", expand=True, padx=50, pady=50)

        # Icono grande
        icon_label = tk.Label(
            placeholder_frame,
            text="üöß",
            font=('Segoe UI', 72),
            bg=Config.COLORS['surface'],
            fg=Config.COLORS['text_light']
        )
        icon_label.pack(pady=(50, 20))

        # T√≠tulo
        title_label = tk.Label(
            placeholder_frame,
            text=f"M√≥dulo {module_name.title()}",
            font=Config.FONTS['heading'],
            bg=Config.COLORS['surface'],
            fg=Config.COLORS['secondary']
        )
        title_label.pack(pady=(0, 10))

        # Mensaje
        message_label = tk.Label(
            placeholder_frame,
            text="En desarrollo - Pr√≥ximamente disponible",
            font=Config.FONTS['default'],
            bg=Config.COLORS['surface'],
            fg=Config.COLORS['text']
        )
        message_label.pack()

        # Informaci√≥n adicional
        info_text = self.get_module_info(module_name)
        if info_text:
            info_label = tk.Label(
                placeholder_frame,
                text=info_text,
                font=Config.FONTS['small'],
                bg=Config.COLORS['surface'],
                fg=Config.COLORS['text_light'],
                wraplength=400,
                justify='center'
            )
            info_label.pack(pady=(20, 0))

        self.current_module = placeholder_frame

    def get_module_info(self, module_name):
        """Obtener informaci√≥n descriptiva del m√≥dulo"""
        module_descriptions = {
            "empleados": "Gesti√≥n completa de empleados, incluyendo datos personales, laborales y de contacto. Funciones de CRUD, b√∫squeda avanzada y carga masiva.",
            "nomina": "Procesamiento de roles de pago semanales, quincenales y mensuales. C√°lculo autom√°tico de horas extras, comisiones y descuentos.",
            "decimos": "C√°lculo y control de d√©cimo tercer sueldo, d√©cimo cuarto sueldo y fondos de reserva seg√∫n normativa ecuatoriana.",
            "vacaciones": "Control de vacaciones anuales, saldos pendientes, solicitudes y pagos. C√°lculo autom√°tico de d√≠as laborables.",
            "prestamos": "Gesti√≥n de pr√©stamos, anticipos y descuentos. Control de cuotas, intereses y saldos pendientes.",
            "egresos": "Administraci√≥n de descuentos varios, multas, uniformes y otros egresos del empleado.",
            "dotacion": "Control de entrega y devoluci√≥n de uniformes, equipos de seguridad y herramientas de trabajo.",
            "reportes": "Generaci√≥n de reportes en PDF y Excel. An√°lisis estad√≠sticos y gr√°ficos de recursos humanos."
        }

        return module_descriptions.get(module_name, "")

    def on_closing(self):
        """Manejar el cierre de la aplicaci√≥n"""
        if messagebox.askokcancel("Salir", "¬øDesea salir del sistema?"):
            logger.info("Cerrando aplicaci√≥n")

            # Limpiar recursos
            try:
                from database.connection import close_session
                close_session()
            except:
                pass

            self.root.quit()

    def show_about(self):
        """Mostrar informaci√≥n sobre la aplicaci√≥n"""
        about_text = f"""
{Config.APP_NAME}
Versi√≥n {Config.APP_VERSION}

Sistema de N√≥mina y Recursos Humanos
Desarrollado para {Config.COMPANY_NAME}

Caracter√≠sticas:
‚Ä¢ Gesti√≥n completa de empleados
‚Ä¢ Procesamiento de n√≥minas ecuatorianas
‚Ä¢ C√°lculo autom√°tico de d√©cimos
‚Ä¢ Control de vacaciones y prestamos
‚Ä¢ Reportes y an√°lisis avanzados
‚Ä¢ Carga masiva de datos
‚Ä¢ Cumplimiento normativa Ecuador

¬© 2024 - Todos los derechos reservados
        """

        messagebox.showinfo("Acerca de", about_text)

    def show_help(self):
        """Mostrar ayuda del sistema"""
        help_text = """
AYUDA DEL SISTEMA

Navegaci√≥n:
‚Ä¢ Use el men√∫ lateral para acceder a los m√≥dulos
‚Ä¢ Haga doble clic en registros para editarlos
‚Ä¢ Use el bot√≥n derecho para opciones adicionales

B√∫squeda:
‚Ä¢ Use % como comod√≠n (ej: Juan%)
‚Ä¢ Los filtros se aplican en tiempo real
‚Ä¢ Combine m√∫ltiples criterios

Carga Masiva:
‚Ä¢ Descargue las plantillas Excel
‚Ä¢ Complete los datos requeridos
‚Ä¢ Use el bot√≥n "Carga Masiva" en cada m√≥dulo

Atajos de Teclado:
‚Ä¢ F5: Actualizar datos
‚Ä¢ Ctrl+F: Buscar
‚Ä¢ Ctrl+N: Nuevo registro
‚Ä¢ Escape: Cancelar operaci√≥n

Para soporte t√©cnico contacte al administrador.
        """

        messagebox.showinfo("Ayuda", help_text)

    def export_backup(self):
        """Exportar respaldo de la base de datos"""
        from tkinter import filedialog
        from datetime import datetime
        from database.connection import DatabaseManager

        try:
            # Seleccionar ubicaci√≥n
            filename = filedialog.asksaveasfilename(
                title="Guardar respaldo",
                defaultextension=".db",
                filetypes=[("Database files", "*.db"), ("All files", "*.*")],
                initialvalue=f"sai_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            )

            if filename:
                db_manager = DatabaseManager()
                if db_manager.backup_database(filename):
                    messagebox.showinfo("√âxito", "Respaldo creado correctamente")
                else:
                    messagebox.showerror("Error", "Error al crear respaldo")

        except Exception as e:
            messagebox.showerror("Error", f"Error al exportar respaldo:\n{str(e)}")

    def import_backup(self):
        """Importar respaldo de la base de datos"""
        from tkinter import filedialog
        from database.connection import DatabaseManager

        try:
            # Confirmaci√≥n
            if not messagebox.askyesno(
                "Confirmar",
                "Esta operaci√≥n reemplazar√° todos los datos actuales.\n¬øEst√° seguro?"
            ):
                return

            # Seleccionar archivo
            filename = filedialog.askopenfilename(
                title="Seleccionar respaldo",
                filetypes=[("Database files", "*.db"), ("All files", "*.*")]
            )

            if filename:
                db_manager = DatabaseManager()
                if db_manager.restore_database(filename):
                    messagebox.showinfo("√âxito", "Respaldo restaurado correctamente")
                    # Recargar m√≥dulo actual
                    if self.current_module:
                        current_module_name = getattr(self.current_module, 'module_name', 'empleados')
                        self.load_module(current_module_name)
                else:
                    messagebox.showerror("Error", "Error al restaurar respaldo")

        except Exception as e:
            messagebox.showerror("Error", f"Error al importar respaldo:\n{str(e)}")

    def show_system_info(self):
        """Mostrar informaci√≥n del sistema"""
        from database.connection import DatabaseManager

        try:
            db_manager = DatabaseManager()
            info = db_manager.get_database_info()

            info_text = f"""
INFORMACI√ìN DEL SISTEMA

Base de Datos:
‚Ä¢ Empleados Activos: {info.get('empleados_activos', 0)}
‚Ä¢ Empleados Total: {info.get('empleados_total', 0)}
‚Ä¢ Departamentos: {info.get('departamentos', 0)}
‚Ä¢ Cargos: {info.get('cargos', 0)}

N√≥mina:
‚Ä¢ Roles Procesados: {info.get('roles_procesados', 0)}
‚Ä¢ Vacaciones Pendientes: {info.get('vacaciones_pendientes', 0)}
‚Ä¢ Pr√©stamos Activos: {info.get('prestamos_activos', 0)}

Sistema:
‚Ä¢ Versi√≥n: {Config.APP_VERSION}
‚Ä¢ Base de Datos: SQLite
‚Ä¢ Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
            """

            messagebox.showinfo("Informaci√≥n del Sistema", info_text)

        except Exception as e:
            messagebox.showerror("Error", f"Error obteniendo informaci√≥n:\n{str(e)}")

class LoginWindow:
    """Ventana de login (placeholder para implementaci√≥n futura)"""

    def __init__(self, root):
        self.root = root
        self.result = None

        # Por ahora, simplemente devolver usuario admin
        self.result = "Admin"

    def show(self):
        """Mostrar ventana de login"""
        # TODO: Implementar ventana de login real
        return self.result