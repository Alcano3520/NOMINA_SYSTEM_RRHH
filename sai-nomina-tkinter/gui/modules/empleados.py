"""M√≥dulo de gesti√≥n de empleados - Versi√≥n corregida"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd
from datetime import datetime, date
import logging
from decimal import Decimal

from config import Config
from gui.components.stat_card import StatCard
from gui.components.data_table import DataTable
from database.connection import get_session
from database.models import Empleado, Departamento, Cargo

logger = logging.getLogger(__name__)

class EmpleadosModule(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent, bg=Config.COLORS['surface'])
        self.session = get_session()
        self.module_name = "empleados"
        self._loading = False  # Bandera para evitar recursi√≥n
        self.setup_ui()
        self.load_data()

    def setup_ui(self):
        """Configurar la interfaz del m√≥dulo"""
        if self._loading:
            return

        self._loading = True

        try:
            # Padding del m√≥dulo
            self.configure(padx=25, pady=25)

            # Header del m√≥dulo
            self.create_header()

            # Estad√≠sticas
            self.create_stats_section()

            # Panel de informaci√≥n
            self.create_info_panel()

            # Tabla de empleados
            self.create_table_section()

        finally:
            self._loading = False

    def create_header(self):
        """Crear encabezado del m√≥dulo"""
        header_frame = tk.Frame(self, bg=Config.COLORS['surface'])
        header_frame.pack(fill="x", pady=(0, 25))

        # T√≠tulo
        title_label = tk.Label(
            header_frame,
            text="üë• Gesti√≥n de Empleados",
            font=Config.FONTS['heading'],
            bg=Config.COLORS['surface'],
            fg=Config.COLORS['secondary']
        )
        title_label.pack(side="left")

        # Botones de acci√≥n
        actions_frame = tk.Frame(header_frame, bg=Config.COLORS['surface'])
        actions_frame.pack(side="right")

        # Bot√≥n Nuevo Empleado
        btn_new = tk.Button(
            actions_frame,
            text="‚ûï Nuevo Empleado",
            command=self.new_employee,
            bg=Config.COLORS['primary'],
            fg="white",
            font=Config.FONTS['default'],
            relief="flat",
            padx=20,
            pady=10,
            cursor="hand2"
        )
        btn_new.pack(side="left", padx=5)

        # Bot√≥n Carga Masiva
        btn_import = tk.Button(
            actions_frame,
            text="‚¨Ü Carga Masiva",
            command=self.import_employees,
            bg=Config.COLORS['success'],
            fg="white",
            font=Config.FONTS['default'],
            relief="flat",
            padx=20,
            pady=10,
            cursor="hand2"
        )
        btn_import.pack(side="left", padx=5)

        # Bot√≥n Reportes
        btn_reports = tk.Button(
            actions_frame,
            text="üìä Reportes",
            command=self.generate_reports,
            bg=Config.COLORS['info'],
            fg="white",
            font=Config.FONTS['default'],
            relief="flat",
            padx=20,
            pady=10,
            cursor="hand2"
        )
        btn_reports.pack(side="left", padx=5)

    def create_stats_section(self):
        """Crear secci√≥n de estad√≠sticas"""
        stats_frame = tk.Frame(self, bg=Config.COLORS['surface'])
        stats_frame.pack(fill="x", pady=(0, 20))

        # Grid de estad√≠sticas
        for i in range(4):
            stats_frame.columnconfigure(i, weight=1)

        # Obtener estad√≠sticas de forma segura
        stats = self.get_employee_stats_safe()

        # Crear tarjetas de estad√≠sticas
        StatCard(
            stats_frame,
            title="Total Empleados",
            value=str(stats['total']),
            subtitle="Activos en sistema",
            color=Config.COLORS['primary']
        ).grid(row=0, column=0, padx=5, sticky="ew")

        StatCard(
            stats_frame,
            title="Personal Seguridad",
            value=str(stats['guards']),
            subtitle="Guardias activos",
            color=Config.COLORS['success']
        ).grid(row=0, column=1, padx=5, sticky="ew")

        StatCard(
            stats_frame,
            title="Personal Administrativo",
            value=str(stats['admin']),
            subtitle="√Årea administrativa",
            color=Config.COLORS['info']
        ).grid(row=0, column=2, padx=5, sticky="ew")

        StatCard(
            stats_frame,
            title="Nuevos Ingresos",
            value=str(stats['new_hires']),
            subtitle="√öltimo mes",
            color=Config.COLORS['warning']
        ).grid(row=0, column=3, padx=5, sticky="ew")

    def create_info_panel(self):
        """Crear panel de informaci√≥n"""
        info_frame = tk.Frame(
            self,
            bg=Config.COLORS['success'],
            relief="flat"
        )
        info_frame.pack(fill="x", pady=(0, 20))

        # Padding interno
        inner_frame = tk.Frame(info_frame, bg=Config.COLORS['success'])
        inner_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # T√≠tulo
        title_label = tk.Label(
            inner_frame,
            text="‚öñÔ∏è Cumplimiento Laboral Ecuador",
            font=Config.FONTS['subheading'],
            bg=Config.COLORS['success'],
            fg="white"
        )
        title_label.pack(anchor="w", pady=(0, 10))

        # Informaci√≥n de cumplimiento
        info_text = (
            "‚úÖ Validaciones de c√©dula ecuatoriana implementadas\n"
            "‚úÖ C√°lculos IESS autom√°ticos (9.45% personal, 11.15% patronal)\n"
            "‚úÖ Gesti√≥n de d√©cimos seg√∫n legislaci√≥n vigente\n"
            "‚úÖ Control de vacaciones y beneficios sociales"
        )

        info_label = tk.Label(
            inner_frame,
            text=info_text,
            font=Config.FONTS['default'],
            bg=Config.COLORS['success'],
            fg="white",
            justify="left"
        )
        info_label.pack(anchor="w")

    def create_table_section(self):
        """Crear secci√≥n de tabla"""
        # T√≠tulo
        title_label = tk.Label(
            self,
            text="üìã Lista de Empleados",
            font=Config.FONTS['subheading'],
            bg=Config.COLORS['surface'],
            fg=Config.COLORS['secondary']
        )
        title_label.pack(anchor="w", pady=(0, 15))

        # Configuraci√≥n de columnas
        columns = [
            {"key": "empleado", "title": "C√ìDIGO", "width": 80},
            {"key": "nombres", "title": "NOMBRES", "width": 150},
            {"key": "apellidos", "title": "APELLIDOS", "width": 150},
            {"key": "cedula", "title": "C√âDULA", "width": 100},
            {"key": "cargo", "title": "CARGO", "width": 100},
            {"key": "depto", "title": "DEPTO", "width": 80},
            {"key": "sueldo", "title": "SUELDO", "width": 100},
            {"key": "fecha_ing", "title": "INGRESO", "width": 100},
            {"key": "estado", "title": "ESTADO", "width": 80}
        ]

        # Crear tabla
        self.table = DataTable(
            self,
            columns=columns,
            on_select=self.on_employee_select,
            on_double_click=self.edit_employee,
            show_actions=True,
            actions=[
                {"text": "üëÅ", "command": self.view_employee, "tooltip": "Ver"},
                {"text": "‚úè", "command": self.edit_employee, "tooltip": "Editar"},
                {"text": "üóë", "command": self.delete_employee, "tooltip": "Eliminar"}
            ]
        )
        self.table.pack(fill="both", expand=True)

    def get_employee_stats_safe(self):
        """Obtener estad√≠sticas de empleados de forma segura"""
        try:
            # Consultas simples y directas
            total = self.session.query(Empleado).filter(
                Empleado.activo == True
            ).count()

            guards = self.session.query(Empleado).filter(
                Empleado.activo == True,
                Empleado.cargo.like('%GUA%')
            ).count()

            admin = self.session.query(Empleado).filter(
                Empleado.activo == True,
                Empleado.cargo.like('%ADM%')
            ).count()

            # Nuevos ingresos (√∫ltimo mes)
            last_month = datetime.now().replace(day=1)
            new_hires = self.session.query(Empleado).filter(
                Empleado.fecha_ing >= last_month,
                Empleado.activo == True
            ).count()

            return {
                'total': total,
                'guards': guards,
                'admin': admin,
                'new_hires': new_hires
            }

        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas: {e}")
            return {
                'total': 0,
                'guards': 0,
                'admin': 0,
                'new_hires': 0
            }

    def load_data(self):
        """Cargar datos de empleados de forma segura"""
        if self._loading:
            return

        try:
            # Consulta limitada y simple
            empleados = self.session.query(Empleado).filter(
                Empleado.activo == True
            ).order_by(Empleado.empleado).limit(50).all()

            data = []
            for emp in empleados:
                try:
                    data.append({
                        "empleado": emp.empleado or "",
                        "nombres": emp.nombres or "",
                        "apellidos": emp.apellidos or "",
                        "cedula": emp.cedula or "",
                        "cargo": emp.cargo or "",
                        "depto": emp.depto or "",
                        "sueldo": f"${float(emp.sueldo or 0):.2f}",
                        "fecha_ing": emp.fecha_ing.strftime("%d/%m/%Y") if emp.fecha_ing else "",
                        "estado": emp.estado or "ACT"
                    })
                except Exception as row_error:
                    logger.warning(f"Error procesando empleado {emp.empleado}: {row_error}")
                    continue

            # Actualizar tabla solo si existe
            if hasattr(self, 'table') and self.table:
                self.table.set_data(data)

        except Exception as e:
            logger.error(f"Error al cargar datos: {e}")
            # No mostrar messagebox para evitar recursi√≥n
            print(f"Error cargando empleados: {e}")

    # M√©todos de acci√≥n simplificados
    def new_employee(self):
        """Crear nuevo empleado"""
        messagebox.showinfo("Nuevo Empleado", "Funci√≥n de nuevo empleado en desarrollo")

    def import_employees(self):
        """Importar empleados"""
        messagebox.showinfo("Carga Masiva", "Funci√≥n de carga masiva en desarrollo")

    def generate_reports(self):
        """Generar reportes"""
        messagebox.showinfo("Reportes", "Funci√≥n de reportes en desarrollo")

    def on_employee_select(self, row_data):
        """Manejar selecci√≥n de empleado"""
        logger.info(f"Empleado seleccionado: {row_data.get('empleado', 'N/A')}")

    def view_employee(self, row_data):
        """Ver empleado"""
        emp_code = row_data.get('empleado', 'N/A')
        messagebox.showinfo("Ver Empleado", f"Ver empleado: {emp_code}")

    def edit_employee(self, row_data):
        """Editar empleado"""
        emp_code = row_data.get('empleado', 'N/A')
        messagebox.showinfo("Editar Empleado", f"Editar empleado: {emp_code}")

    def delete_employee(self, row_data):
        """Eliminar empleado"""
        emp_code = row_data.get('empleado', 'N/A')
        if messagebox.askyesno("Confirmar", f"¬øEliminar empleado {emp_code}?"):
            messagebox.showinfo("Eliminado", "Empleado eliminado correctamente")